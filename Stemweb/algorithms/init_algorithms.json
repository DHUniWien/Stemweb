[
	{
  		"model": "algorithms.algorithmarg",
  		"pk": 1,
  		"fields": {
  			"key": "infile",
  			"value": "input_file",
  			"name": "Input File",
  			"description": "Must be .nex",
  			"external": "False"
  		}
  	},
  	
	{
  		"model": "algorithms.algorithmarg",
  		"pk": 2,
  		"fields": {
  			"key": "itermaxin",
  			"value": "positive_integer",
  			"name": "Iterations",
  			"description": ""
  		}
  	},
  	
  	{
  		"model": "algorithms.algorithmarg",
  		"pk": 3,
  		"fields": {
  			"key": "runmax",
  			"value": "positive_integer",
  			"name": "Runs",
  			"description": "Number of 'parallel' runs"
  		}
  	},
  	
  	{
  		"model": "algorithms.algorithmarg",
  		"pk": 4,
  		"fields": {
  			"key": "learnlength",
  			"value": "boolean",
  			"name": "Estimate Arc Length",
  			"description": ""
  		}
  	},
  	
  	{
  		"model": "algorithms.algorithmarg",
  		"pk": 5,
  		"fields": {
  			"key": "input_file",
  			"value": "input_file",
  			"name": "Input File",
  			"description": "Must be .nex",
  			"external": "False"
  		}
  	},
  	
  	{
  		"model": "algorithms.algorithmarg",
  		"pk": 6,
  		"fields": {
  			"key": "infolder",
  			"value": "input_file",
  			"name": "Input File",
  			"description": "Must be .csv",
  			"external": "False"
  		}
  	},
  	
  	 {
  		"model": "algorithms.algorithmarg",
  		"pk": 7,
  		"fields": {
  			"key": "imax",
  			"value": "positive_integer",
  			"name": "Iterations",
  			"description": ""
  		}
  	},
  	
  	  	 {
  		"model": "algorithms.algorithmarg",
  		"pk": 8,
  		"fields": {
  			"key": "radial",
  			"value": "boolean",
  			"name": "Radial Image Layout",
  			"description": "",
  			"external": "False"
  		}
  	},

  	
	{
    	"model": "algorithms.algorithm",
    	"pk": 2,
    	"fields": {
      		"name": "RHM",
      		"source": "No source currently available.",
      		"desc": "The Roos-Heikkila-Myllymaki (RHM) method is similar to the maximum parsimony method. Both of them optimize a bifurcating tree structure to minimize a cost function. In RHM, the cost function is based on data compression which measures not only whether two variants are the same or not but also how different they are. The comparison is done in blocks of about ten words, which implies that change of word order is also handled in a sensible way: a change in word order will typically result in a smaller cost than changing the words into completely new ones. Because the comparison is based on the actual words, RHM requires that the actual text versions are given as the input in CSV (comma-separated values) format. RHM utilizes a stochastic search technique to minimize the cost of the stemma. The search procedure may easily get stuck in a suboptimal stemma unless the number of iterations is large enough. The best way to find out whether the number of iterations is large enough is to run RHM several times and to see if the resulting stemmata are similar or not. If not, it usually helps to increase the number of iterations. Note that it is often not possible to obtain identical stemmata in every run even if the number of iterations is very large.",
      		"url": "http://",
      		"args": [6, 7, 8],
      		"file_extension": "csv"
    	}
  	},
  	
  	{
    	"model": "algorithms.algorithm",
    	"pk": 3,
    	"fields": {
      		"name": "Neighbour Joining",
      		"source": "No source currently available.",
      		"desc": "Neighbor-Joining (NJ) is a classical phylogenetic algorithm which operates in a bottom-up fashion, combining at each step two taxa or groups of taxa. Choosing which groups of taxa to combine is based on distances between the taxa. NJ is very fast and it is guaranteed to converge to the true underlying phylogenetic tree (or stemma) if one exists as the length of the sequences (or texts) increases. However, in practice it is often slightly less accurate than, for instance, maximum parsimony or RHM. Note that the version implemented in this server takes as input a set of sequences in Nexus format and computes their pairwise distances using Hamming distance (the number of differences divided by the length of the sequences). This may or may not be desirable. If another distance is preferred, or if for instance, a so called Jukes-Cantor correction is called for, it is necessary to use some other tools. NJ is available in most phylogenetic software tools.",
      		"url": "https://en.wikipedia.org/wiki/Neighbor_joining",
      		"args": [5, 8],
      		"file_extension": "nex"
    	}
  	},

  	{
    	"model": "algorithms.algorithm",
    	"pk": 4,
    	"fields": {
      		"name": "Neighbour Net",
      		"source": "No source currently available.",
      		"desc": "Neighbor-Net is a distance based method for constructing phylogenetic networks that is based on the Neighbor-Joining (NJ) algorithm of Saitou and Nei.It is a network construction AND data representation method that combines aspects of the neighbor joining (NJ) and SplitsTree. Like NJ, NeighborNet uses agglomeration: taxa are combined into progressively larger and larger overlapping clusters. Like SPLITSTREE, NeighborNet constructs networks rather than trees, and so can be used to represent multiple phylogenetic hypotheses simultaneously ... NeighborNet tends to produce networks that are substantially more resolved than those made with SPLITSTREE. The method is efficient ( O ( n 3) time) and is well suited for the preliminary analyses of complex phylogenetic data. \n Neighbor-Net provides a snapshot of the data that can guide more detailed analysis. Unlike split decomposition, Neighbor-Net scales well and can quickly produce detailed and informative networks for several hundred taxa.\n See https://doi.org/10.1093/molbev/msh018 , and  https://dl.acm.org/doi/10.5555/645907.673275",
      		"url": "https://en.wikipedia.org/wiki/Neighbor-net",
      		"args": [5],
      		"file_extension": "nex"
    	}
  	}
]
